<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_energyGenerator</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialize Self &amp; Create Energy Devices
engaged = false;

// stores monitored input buttons
commandButtonArr[0] = gp_shoulderl;
commandButtonArr[1] = gp_shoulderr;

// true while providing instruction to players
// false while recieving player input
instructionalMode = true;
instructionLimit = 3;

// alarm which determines duration between successive commands
instructionAlarmTimeLimit = (room_speed * 3);
alarm[0] = -1;

// stores instructed player indexes and buttons
instructionQueue = ds_queue_create();

// create and position energy devices
energyDeviceA = instance_create(x - (sprite_width / 2), y, obj_deviceEnergy);
energyDeviceA.x += (energyDeviceA.sprite_width / 2);

energyDeviceB = instance_create(x + (sprite_width / 2), y, obj_deviceEnergy);
energyDeviceB.x -= (energyDeviceB.sprite_width / 2);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Instruct an Energy Device to Alert a Player
if(energyDeviceA != undefined &amp;&amp; energyDeviceA != noone &amp;&amp; energyDeviceA.engagedPlayerIndex != -1
    &amp;&amp; energyDeviceB != undefined &amp;&amp; energyDeviceB != noone &amp;&amp; energyDeviceB.engagedPlayerIndex != -1)
{   
    // randomly select the player who is to issue input and the button which is expected to be pressed
    var selectedPlayerIndex = choose(energyDeviceA.engagedPlayerIndex, energyDeviceB.engagedPlayerIndex);
    var selectedButton = choose(commandButtonArr[0], commandButtonArr[1]);
    
    // be sure to alert the NON-input player via controller vibration
    if(selectedPlayerIndex == energyDeviceA.engagedPlayerIndex)
    { obj_deviceEnergy_FeedbackAlert(energyDeviceB, selectedButton); }
    else
    { obj_deviceEnergy_FeedbackAlert(energyDeviceA, selectedButton); }
    
    // be sure to enqueue the newly issued command into the instruction queue
    var issuedCommand = instance_create(x, y, obj_energyGeneratorInstruction);
    issuedCommand.targetPlayerIndex = selectedPlayerIndex;
    issuedCommand.targetButton = selectedButton;
    ds_queue_enqueue(instructionQueue, issuedCommand);
}

// prepare for another instruction or switch away from instructional mode
if(ds_queue_size(instructionQueue) &gt;= instructionLimit)
{
    instructionalMode = false;
    alarm[0] = -1;
}
else
{
    alarm[0] = instructionAlarmTimeLimit;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Handle Player Input
if(engaged &amp;&amp; !instructionalMode &amp;&amp; !ds_queue_empty(instructionQueue))
{
    // scan for player input
    var playerIndexArr;
    playerIndexArr[0] = energyDeviceA.engagedPlayerIndex;
    playerIndexArr[1] = energyDeviceB.engagedPlayerIndex;

    for(i = 0; i &lt; 2; i++)
    {
        for(j = 0; j &lt; 2; j++)
        {
            if(gamepad_button_check_pressed(playerIndexArr[i], commandButtonArr[j]))
            {
                // determine target player and depressed button
                var targetCommandInfo = ds_queue_dequeue(instructionQueue);
                
                // if input player index and button matches target, increase energy
                if(playerIndexArr[i] == targetCommandInfo.targetPlayerIndex
                    &amp;&amp; commandButtonArr[j] == targetCommandInfo.targetButton)
                { AdjustBaseEnergy(10); }
                
                // destroy target command info object
                with(targetCommandInfo) { instance_destroy(); }
            }
        }
    }
    
    // once all commands have been processed, switch to instructional mode
    if(ds_queue_empty(instructionQueue))
    {
        // clear instruction queue
        ds_queue_clear(instructionQueue);
        
        // switch to instructional mode
        instructionalMode = true;
        alarm[0] = instructionAlarmTimeLimit;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
