<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialize Variables
grav = 0.2;
hsp = 0;
vsp = 0;
movespeed = 4;
climbspeed = 1;
descendspeed = 2;
climbing = false;

playerIndex = undefined;

engagedDevice = undefined;
engagedPipePanel = undefined;

gamepadVibrating = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Movement &amp; Collision Handling
if(is_undefined(engagedDevice) &amp;&amp; is_undefined(engagedPipePanel))
{
    //Check for player input
    key_walkLeft = -(gamepad_axis_value(playerIndex, gp_axislh) &lt; 0);
    key_walkRight = gamepad_axis_value(playerIndex, gp_axislh) &gt; 0;
    key_climb = -(gamepad_axis_value(playerIndex, gp_axislv) &lt; 0);
    key_descend = gamepad_axis_value(playerIndex, gp_axislv) &gt; 0;
    
    //Handle climbing/descending
    var climb = key_climb + key_descend;
    var collidedLadder = instance_place(x,y,obj_ladder);
    // check for climb/descend begin
    if(!climbing &amp;&amp; climb != 0)
    {
        if(collidedLadder != noone) // begin ascent
        {
            x = collidedLadder.x;
            climbing = true;
        }
        else if (climb &gt; 0) // begin descent
        {
            var belowLadder = instance_place(x,y + 1,obj_ladder);
            if(belowLadder != noone)
            {
                x = belowLadder.x;
                y += 1;
                climbing = true;
            }
        }
    }
    // move player during ascent/descent
    if(climbing)
    {
        vsp = 0;
        hsp = 0;
        if(climb == -1) vsp = -climbspeed;
        else if (climb == 1) vsp = descendspeed;
        if(!place_meeting(x,y,obj_ladder)) climbing = false;
    }
    
    //Handle vertical movement
    if(!climbing &amp;&amp; vsp &lt; 10) vsp += grav;
    
    //Handle horizontal movement
    if(!climbing)
    {
        move = key_walkLeft + key_walkRight;
        hsp = move * movespeed;
    }
    
    //Horizontal Collision
    if(place_meeting(x + hsp, y, obj_wall))
    {
        while(!place_meeting(x+sign(hsp),y,obj_wall))
        { x += sign(hsp); }
        hsp = 0;
    }
    x += hsp;
    
    //Vertical Collision
    var arrSolidObj;
    arrSolidObj[0] = obj_wall;
    if(!climbing) arrSolidObj[1] = obj_ladderwall;
    for(i = 0; i &lt; array_length_1d(arrSolidObj); i++)
    {
        if(place_meeting(x, y + vsp, arrSolidObj[i]))
        {
            while(!place_meeting(x, y+sign(vsp), arrSolidObj[i]))
            { y += sign(vsp); }
            vsp = 0;
            climbing = false;
        }
    }
    y += vsp;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Device Interaction
if(gamepad_button_check_pressed(playerIndex, gp_face1))
{
    // check for contact with device
    var device = instance_place(x, y, obj_device);
    if(device != noone &amp;&amp; (device.engagedPlayerIndex &lt; 0 || device.engagedPlayerIndex == playerIndex))
    {
        // engage device
        if(is_undefined(engagedDevice))
        {engagedDevice = device;}
        // disengage device
        else
        {engagedDevice = undefined;}
    
        // toggle engagement of device
        obj_device_ToggleEngage(device, playerIndex);
    }
    // check for contact with pipe panel
    else
    {
        var pipePanel = instance_place(x, y, obj_pipePanel);
        if(pipePanel != noone &amp;&amp; (pipePanel.engagedPlayerIndex &lt; 0 || pipePanel.engagedPlayerIndex == playerIndex))
        {
            // engage pipe panel
            if(is_undefined(engagedPipePanel))
            {engagedPipePanel = pipePanel;}
            // disengage pipe panel
            else
            {engagedPipePanel = undefined;}
            
            // toggle engagement of pipe panel
            obj_pipePanel_ToggleEngage(pipePanel, playerIndex);
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Equipment Cycling
if(!is_undefined(engagedDevice))
{
    var cycleForward = -1;
    if(gamepad_button_check_pressed(playerIndex, gp_shoulderr)) cycleForward = true;
    else if(gamepad_button_check_pressed(playerIndex, gp_shoulderl)) cycleForward = false;
    
    if(cycleForward != -1)
    {
        var currentEquipment = FindEngagedEquipment(engagedDevice.type, playerIndex);
        if(currentEquipment != noone)
        {
            var nextEquipment = FindNextAvailableEquipment(engagedDevice.type, currentEquipment, cycleForward);
            if(nextEquipment != noone)
            {
                obj_equipment_ToggleEngage(currentEquipment, engagedDevice.type, -1);
                obj_equipment_ToggleEngage(nextEquipment, engagedDevice.type, playerIndex);
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="75">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Gamepad Lost - Destroy Self, Disengage Device
if(async_load != noone)
{
    var type = ds_map_find_value(async_load, "event_type");
    var index = ds_map_find_value(async_load, "pad_index");
    if (type == "gamepad lost" &amp;&amp; index == playerIndex)
    {
        // disengage device
        if(!is_undefined(engagedDevice))
        {obj_device_ToggleEngage(engagedDevice, playerIndex);}
        
        // destroy self
        instance_destroy();
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
