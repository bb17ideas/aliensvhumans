<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_forcefieldDeactivated</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>obj_equipment</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>604</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_inherited</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialize Variables
activated = false;

xCoordMin = view_xview[0] + (sprite_width / 2);
xCoordMax = view_xview[0] + view_wview[0] - (sprite_width / 2);

hsp = 4;

// energy cost value and alarm
energyCost = 1;
energyCostTimeLimit = room_speed;
alarm[0] = -1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Decrement Energy
AdjustBaseEnergy(-energyCost);

// if necessary, deactivate forcefield and halt energy cost timer
if(obj_baseManager.energy &lt; energyCost)
{
    activated = false;
    sprite_index = spr_forcefieldDeactivated;
    alarm[0] = -1;
}
// otherwise, reset energy cost timer
else
{
    alarm[0] = energyCostTimeLimit;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Lateral Movement and Activation
if(engagedNavigationPlayerIndex &gt;= 0)
{
    // move forcefield
    if(gamepad_axis_value(engagedNavigationPlayerIndex, gp_axislh) &lt; 0 &amp;&amp; x &gt; xCoordMin)
    {x -= hsp;}
    else if(gamepad_axis_value(engagedNavigationPlayerIndex, gp_axislh) &gt; 0 &amp;&amp; x &lt; xCoordMax)
    {x += hsp;}
}

if(engagedActivationPlayerIndex &gt;= 0)
{
    // activate/deactivate forcefield
    if(gamepad_button_check_pressed(engagedActivationPlayerIndex, gp_face3))
    {
        var allowActivationToggle = true;    
    
        // attempting activation
        if(!activated)
        {
            // if insufficient energy exists in pool, disallow activation
            if(obj_baseManager.energy &lt; energyCost)
            { allowActivationToggle = false; }
        }
    
        if(allowActivationToggle)
        {
            // reset or cancel energy cost timer
            if(!activated)
            { alarm[0] = energyCostTimeLimit; }
            else
            { alarm[0] = -1; }
            
            activated = !activated;
            if(activated) sprite_index = spr_forcefieldActivated;
            else sprite_index = spr_forcefieldDeactivated;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
